Есть ли необходимость делать методы сравнения по массе виртуальными?
В данном случае, нет необходимости делать методы сравнения по массе виртуальными, потому что масса фигуры определяется через площадь, и площадь уже вычисляется с помощью виртуального метода. Если все фигуры используют одинаковую плотность, то сравнение фигур по массе эквивалентно сравнению по площади.

Получится ли также перегрузить операторы сравнения для интерфейса BaseCObject, чтобы сравнивать объекты по объему занимаемой памяти?
Да, можно перегрузить операторы сравнения для интерфейса BaseCObject и сравнивать объекты по объему занимаемой памяти. Однако, стоит учитывать, что сравнение по памяти может не всегда корректно отражать сравнение по "величине" объектов, так как разные объекты могут иметь разную структуру данных и разные методы.

Предположите, что в дальнейшем придется изменить код таким образом, чтобы фигуры (оставаясь сами по себе плоскими) задавались уже не в двумерном, а в трехмерном пространстве. Укажите как бы вы действовали? Что пришлось бы изменить?
Для перехода к трехмерному пространству, необходимо внести следующие изменения:

Изменить методы и атрибуты классов, связанные с позицией и ориентацией фигур. Вместо двух координат, нужно будет хранить три координаты (x, y, z), а также информацию об ориентации фигур в пространстве (например, кватернион или матрицу вращения).

Изменить метод Center() в классе Figure, чтобы он возвращал пару из трех координат (x, y, z) вместо пары из двух координат.

В классах Hexagon и IsoscelesTrapezoid изменить методы, связанные с расчетом центра фигур, чтобы учитывать положение и ориентацию в трехмерном пространстве.

В main.cpp изменить алгоритм вычисления центра масс системы, чтобы учитывать трехмерные координаты.

Вывод информации о фигурах также следует обновить, чтобы отображать трехмерные координаты и ориентацию фигур в пространстве.
После внесения этих изменений, система будет способна работать с геометрическими фигурами, заданными в трехмерном пространстве. 
Важно отметить, что сама сущность фигур остается плоской, и вычисления площади и периметра не изменятся. 
Однако, добавление координаты z и информации об ориентации позволит работать с расположением и поворотом фигур в трехмерном пространстве, 
что будет полезно для многих приложений, таких как компьютерная графика, физическое моделирование и анализ геометрических данных.
